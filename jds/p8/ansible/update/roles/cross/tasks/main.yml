# Description: performs incremental and maintenance updates for cross servers.
#
# Copyright (c) 2025 honeok <honeok@duck.com>
#
# Thanks: zzwsec <zzwsec@163.com>
#
# Licensed under the MIT License.
# This software is provided "as is", without any warranty.

---
# 检查cross服务器的文件夹
- name: 'Check cross server directory'
  shell: 'find {{ base_path }} -maxdepth 1 -type d -name "crossserver*" -printf "%f\n"'
  register: cross_dir
  changed_when: cross_dir.stdout_lines | length > 0
  failed_when: cross_dir.rc != 0
  tags:
    - always

# 更新文件夹不存在则创建
- name: 'If the updated directory does not exist, create it'
  file:
    path: '{{ update_path }}'
    state: directory
    mode: '0755'
  tags:
    - always

# 检查更新文件夹状态
- name: 'Check status of the update directory'
  stat:
    path: '{{ update_path }}'
  register: update_dir
  tags:
    - always

# 删除远程主机更新路径
- name: 'Delete remote host update directory'
  shell: 'find {{ update_path }} -maxdepth 1 -not -path {{ update_path }} -exec rm -rf {} +'
  changed_when: false
  when:
    - update_dir.stat.exists and update_dir.stat.isdir
    - update_path != "/"
  tags:
    - always

# 分发跨服分组文件
- name: 'Send cross server group file'
  copy:
    src: '{{ playbook_dir }}/share/groups.lua'
    dest: '{{ update_path }}'
    mode: '0644'
  tags:
    - groups

# 重读更新分发更新包
- name: 'Send package of the reload update'
  copy:
    src: '{{ playbook_dir }}/share/increment.tar.gz'
    dest: '{{ update_path }}'
  tags:
    - increment

# 维护更新分发更新包
- name: 'Send package of the maintenance update'
  copy:
    src: '{{ playbook_dir }}/share/updategame.tar.gz'
    dest: '{{ update_path }}'
  tags:
    - maint

# 重读更新解压更新包
- name: 'Uncompress package of the reload update'
  unarchive:
    src: '{{ update_path }}/increment.tar.gz'
    dest: '{{ update_path }}'
    remote_src: yes
  tags:
    - increment

# 维护更新解压更新包
- name: 'Uncompress package of the maintenance update'
  unarchive:
    src: '{{ update_path }}/updategame.tar.gz'
    dest: '{{ update_path }}'
    remote_src: yes
  tags:
    - maint

# 强制更新覆盖分组文件
- name: 'Force update the group files'
  copy:
    src: '{{ update_path }}/groups.lua'
    dest: '{{ base_path }}/{{ item }}/etc/groups.lua'
    remote_src: yes
    force: yes
  loop: '{{ cross_dir.stdout_lines }}'
  when: cross_dir.stdout_lines is defined and cross_dir.stdout_lines | length > 0
  tags:
    - groups

# 强制更新覆盖, 重读或维护阶段
- name: 'Force update the reload or maintenance'
  shell: 'command cp -rf {{ update_path }}/app/* {{ base_path }}/{{ item }}/'
  loop: '{{ cross_dir.stdout_lines }}'
  when: cross_dir.stdout_lines is defined and cross_dir.stdout_lines | length > 0
  tags:
    - increment
    - maint

# 过滤cross服务器进程
- name: 'Filter cross processes'
  shell: 'pgrep -af {{ base_path }}/{{ item }}/{{ app_name }}'
  register: cross_stat
  ignore_errors: yes
  loop: '{{ cross_dir.stdout_lines }}'
  tags:
    - always

# 如果进程存在则执行重读, 如果不存在则仅执行更新覆盖
- name: Reload cross process'
  shell: './server.sh reload && sleep 1 && ./server.sh reload'
  args:
    chdir: '{{ base_path }}/{{ item.item }}'
  when: cross_stat.results is defined and item.rc == 0
  loop: '{{ cross_stat.results }}'
  tags:
    - always